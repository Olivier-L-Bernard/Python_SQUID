# -*- coding: utf-8 -*-
"""
Created on Tue Jul  7 14:13:17 2020

@author: Laurier
"""

import numpy as np
from matplotlib import pyplot as plt
import math
import os.path
from scipy.interpolate import interp1d
import seaborn as sns
#----------------------------------------------------------------------------
from _Fonctions_v2 import getColumns

#Ouvertures des fichiers et autres

fpath = 'C:/Users/Laurier/Desktop/EMCR/02- Data/03-Data_'

cryst = 'TmMnO3' #{'HoMn2O5', 'TbMn2O5', 'TmMnO3', 'YbMn2O5, 'YbMnO3'}
crystt = r'TmMnO$_{3}$'
date =  190906 #(AAMMJJ) 190705 190906
echantillon = 'A' #Lettre ou numeros...
mm = 10#{27.7, 8.32, 15.7, 1.5, 10} masse en mg

angmin = 0 #Angle minimal a etudier
angmax=180 #Angle maximal
pas = 1 #Pas entre les angles
Angle = np.arange(angmin, angmax+pas, pas) #Creation liste des angle

temp = 2.0 #Changer si l'option de study est 'T'
champ = 5.0 #Changer si l'option de study est 'H'
study = 'T' # H pour un champ magnétique fixe, T pour une température fixe

prefix = '_'+ str(echantillon)+'_MCE_'+ str(mm) +'mg_Holder'
name = str(cryst) + prefix + '_axe'  #nom du doc sans le .txt ni l'angle
masse = float(mm)*(10**-3) #masse en g
print('La masse est de', masse ,'g')
prefix = '_'+ str(echantillon)+'_MCE_'+ str(mm) +'mg_Holder'
name = str(cryst) + prefix + '_axe'  #nom du doc sans le .txt ni l'angle
chp= np.concatenate((np.arange(0,1,0.1),np.arange(1,3,0.2),np.arange(3,7.5,0.5)),axis= None) #Champ magnetique mesurer
champmag = [round(num, 2) for num in chp]
tmp= np.concatenate((np.arange(2,17,1),np.arange(18,27,2),np.arange(30,83,4)),axis= None) #Champ magnetique mesurer
temperature = [round(num, 1) for num in tmp]
print('Températures étudiées: '+ str(temperature))
print('Nombre de tepérature :' + str(len(temperature)))
print('Champs étudiés: '+ str(champmag))
print('Nombre de champ: ' + str(len(champmag)))

if study == 'H':
    Mm = [[] for m in range(len(Angle))]
    tempi = [[] for m in range(len(Angle))]
if study == 'T':
    Mm = [[] for m in range(len(Angle))]
    champi = [[] for m in range(len(Angle))]
#print(len(Mm))    
j=0
for ang in Angle:
    i=0 
    file = open(os.path.join(fpath+ str(cryst) +'/' + str(echantillon)+ '/' + str(date), name+ str(ang)+'.txt'), 'r')
    print(name+ str(ang))
    cols, indexToName = getColumns(file)
    file.close()
    Mag = list(np.float_(cols['Long Moment (emu)'])/masse)
    FOe = list(np.float_(cols['Field (Oe)'])/10000)
    Temp = list(np.float_(cols['Temperature (K)']))
    if study == 'H':
        ind = champmag.index(champ)
        #print(ind)
        for tempe in temperature:
            pos = (i*29)+ind
            #print(pos)
            #print(Mag[pos])
            Mm[j].append(Mag[pos])
            tempi[j].append(tempe)
            i+=1
        NUM_COLORS = len(tmp)
    if study == 'T':
        ind = temperature.index(temp)
        #print(ind)
        for i in range(len(Mag[29*ind:29*ind+29])):
            #print((Temp[29*ind:29*ind+29]))
            Mm[j].append(Mag[29*ind+i])
            champi[j].append(FOe[29*ind+i])
        NUM_COLORS = len(chp+1)
    j+=1
    #print(j)

font = 10
font2 = 10

LINE_STYLES = ['solid', 'dashed', 'dashdot', 'dotted',(0,(3,5,1,5,1,5)),(0,(5,10)),(0,(3,1,1,1))]
NUM_STYLES = len(LINE_STYLES)
sns.reset_orig()  # get default matplotlib styles back
clrs = sns.color_palette('husl', n_colors=NUM_COLORS)  # a list of RGB tuples
k=0 
if study == 'H':
    Magnetisation =[[] for a in range(len(temperature))]
    Angular = [[] for a in range(len(temperature))]
    while k < len(temperature):
        for i in range(len(Angle)):
            Magnetisation[k].append(Mm[i][k])
            Angular[k].append(Angle[i])
        graph= plt.plot(Angular[k],Magnetisation[k], label = str(temperature[k]) +'K') 
        graph[0].set_color(clrs[k])
        graph[0].set_linestyle(LINE_STYLES[k%NUM_STYLES])
        k+=1
    plt.title(r"M en fonction de l'angle du " + str(crystt) +"-"+str(echantillon) +" pour un champ magnétique de " +str(champ) +"T et différentes températures.",fontsize = font, wrap=True)
     
if study == 'T':
    Magnetisation =[[] for a in range(len(champmag))]
    Angular = [[] for a in range(len(champmag))]
    while k < len(champmag):
        for i in range(len(Angle)):
            Magnetisation[k].append(Mm[i][k])
            Angular[k].append(Angle[i])
        graph = plt.plot(Angular[k],Magnetisation[k], label = str(champmag[k]) +'T')  
        graph[0].set_color(clrs[k])
        graph[0].set_linestyle(LINE_STYLES[k%NUM_STYLES])
        k+=1
    plt.title(r"Aimantation en fonction de l'angle du " + str(crystt) +" échantillon "+str(echantillon) +" pour une température de " +str(temp) +"K et différents champs magnétique.",fontsize = font, wrap=True)

 
plt.tick_params(axis='both', which='major', labelsize=font)
plt.tick_params(axis='both', which='minor', labelsize=font-2)  
plt.legend( loc='best', ncol=3,  frameon = True,fontsize=font2-2)            
plt.xlabel(r'Angle ($\theta^{\circ}$)',fontsize=font) # axe x température
plt.xlim(0,180)
plt.ylabel(r'Aimantation (Am$^{2}$/kg)',fontsize=font) #axe y delta s  
plt.show()
